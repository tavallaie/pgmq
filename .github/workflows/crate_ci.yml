name: pgmq-rs client crate CI workflow

defaults:
  run:
    shell: bash
    working-directory: pgmq-rs/

on:
  pull_request:
    branches:
      - main
    paths:
      - ".github/workflows/crate_ci.yml"
      - "pgmq-rs/**"
  push:
    branches:
      - main

jobs:
  lint:
    name: Run linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install minimal nightly with clippy and rustfmt
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - name: Cargo format
        run: cargo fmt --all --check
      - name: Clippy
        run: cargo clippy

  tests:
    name: Run tests
    runs-on: ubuntu-22.04
    needs: lint
    services:
      postgres:
        image: ghcr.io/pgmq/pg17-pgmq:latest
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: "postgresql://postgres:postgres@0.0.0.0:5432/postgres"
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - name: install dependencies
        run: cargo install sqlx-cli
      - name: run all tests
        run: make test
      - name: Migrations
        # ensure migration cache is up to date
        run: cargo sqlx prepare --check

  test_sql_install:
    name: Test SQL Installation
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
      SQLX_OFFLINE: 1
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - name: Set PGMQ_VERSION
        run: echo "PGMQ_VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Run SQL installation test
        run: cargo test test_sql_lifecycle --release --features cli -- --ignored

  publish:
    name: Publish or validate crate
    runs-on: ubuntu-latest
    needs: [lint, tests]
    if: github.repository == 'pgmq/pgmq'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits to compare
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: pgmq-rs/
          key: ${{ runner.os }}-cargo-${{ hashFiles('pgmq-rs/Cargo.lock') }}
      - name: Check if Cargo.toml changed and publish
        working-directory: pgmq-rs/
        run: |
          # Different logic for PR vs push
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, compare against the base branch
            if git diff --quiet origin/${{ github.base_ref }} HEAD -- Cargo.toml; then
              echo "No changes to Cargo.toml, skipping publish"
              exit 0
            fi
          else
            # For pushes, compare against previous commit
            if git diff --quiet HEAD~1 HEAD -- Cargo.toml; then
              echo "No changes to Cargo.toml, skipping publish"
              exit 0
            fi
          fi
          
          echo "Cargo.toml changed, proceeding with publish"
          
          # Determine if we should do a dry run or actual publish
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "On main branch, publishing to crates.io"
            cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          else
            echo "Not on main branch, running dry-run publish"
            cargo publish --dry-run
          fi
